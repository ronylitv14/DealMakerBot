import decimal
import os
from aiogram.types import CallbackQuery, Message
from aiogram_dialog.widgets.kbd import Button
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.dialog import DialogManager

from handlers.states_handler import ExecutorDialog
from handlers.balance.window_state import BalanceGroup, WithdrawingMoneySub

from keyboards.inline_keyboards import create_payment_msg
from keyboards.clients import create_keyboard_client
from keyboards.executors import create_keyboard_executor

from utils.dialog_texts import redirect_payment_url
from utils.bank_card_utils import is_valid_card, format_card_number
from handlers.utils.payment_system import BodyInfo, HeaderInfo, get_invoice_payment_link

from database_api.components.users import Users, UserResponse
from database_api.components.balance import Balance, BalanceModel, BalanceAction
from database_api.components.transactions import Transactions, TransactionStatus, TransactionType
from database_api.components.withdrawals import Withdrawals, WithdrawalStatus

from dotenv import load_dotenv

load_dotenv()

X_TOKEN = os.getenv("X_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
COMMISSION = decimal.Decimal("0.03")
TG_GROUP_NAME = os.getenv("TG_GROUP_NAME")


class ButtonCallbacks:
    @staticmethod
    async def add_money(callback: CallbackQuery, button: Button, manager: DialogManager):
        await manager.switch_to(BalanceGroup.adding_money)

    @staticmethod
    async def process_money_adding(message: Message, input_widget: MessageInput, manager: DialogManager):
        try:
            input_money = int(message.text)
            manager.dialog_data["input_money_adding"] = input_money

            await manager.switch_to(BalanceGroup.accept_request)
        except ValueError:
            await message.answer(
                text="<b>üî¥ –ü–æ–º–∏–ª–∫–∞ —É –≤–≤–µ–¥–µ–Ω–Ω—ñ</b>\n"
                     "<i>–í–∏ –≤–≤–µ–ª–∏ —Å—É–º—É –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ.</i> –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤: 100, 200, 230, 300 —Ç–æ—â–æ.",
                parse_mode="HTML"
            )

    @staticmethod
    async def accept_deposit(callback: CallbackQuery, button: Button, manager: DialogManager):
        cur_state = manager.dialog_data.get("cur_state")

        is_executor = True if cur_state == ExecutorDialog.executor_state else False

        await callback.answer(
            text="–ó–∞—Ä–∞–∑ –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –ø–ª–∞—Ç—ñ–∂–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É"
        )
        try:
            payment_response = await get_invoice_payment_link(
                header_info=HeaderInfo(
                    x_token=X_TOKEN
                ),
                body_info=BodyInfo(
                    amount=int(manager.dialog_data.get("input_money_adding")) * 100,
                    webhook_url=f"{WEBHOOK_URL}/webhook/monobank/{callback.from_user.id}",
                    # redirect_url=TG_GROUP_NAME
                )
            )
        except ValueError as err:
            await manager.done()
            await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –ø–ª–∞—Ç–µ–∂—É! –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!")
            return

        invoice_id = payment_response.get("invoiceId")
        page_url = payment_response.get("pageUrl")

        await callback.message.answer(
            text=redirect_payment_url,
            reply_markup=create_payment_msg(
                payment_url=page_url
            ),
            parse_mode="HTML"
        )

        response = await Transactions().save_transaction_data(
            invoice_id=invoice_id,
            receiver_id=callback.from_user.id,
            transaction_type=TransactionType.debit,
            transaction_status=TransactionStatus.pending,
            amount=manager.dialog_data.get("input_money_adding"),
        ).do_request()

        if response.is_error:
            await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó! –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!")
            return

        await manager.done()
        await callback.message.answer(
            text="–ü—Ä–∏ —É—Å–ø—ñ—à–Ω—ñ–π –æ–ø–ª–∞—Ç—ñ —É—Å—ñ –∫–æ—à—Ç–∏ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞–Ω—ñ –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫!",
            reply_markup=create_keyboard_executor() if is_executor else create_keyboard_client()
        )

    @staticmethod
    async def check_password(message: Message, input_widget: MessageInput, manager: DialogManager):
        password = message.text

        user: UserResponse = await Users().get_user_from_db(telegram_id=message.from_user.id).do_request()

        manager.dialog_data["dialog_user"] = user.model_dump(mode="json")
        is_authorized = user.check_password(
            password=password
        )
        if is_authorized:

            balance: BalanceModel = await Balance().get_user_balance(user_id=user.telegram_id).do_request()
            manager.dialog_data["cards"] = balance.user_cards
            manager.dialog_data["balance"] = balance.balance_money

            await message.answer(
                text="<b>üü¢ –ü–∞—Ä–æ–ª—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ</b>\n"
                     "<i>–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å.</i> –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º.",
                parse_mode="HTML"
            )
            await manager.switch_to(WithdrawingMoneySub.withdraw_sum)
        else:
            await message.answer(
                text="<b>üî¥ –ü–æ–º–∏–ª–∫–∞</b>\n"
                     "<i>–í–≤–µ–¥–µ–Ω–∏–π –≤–∞–º–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π.</i> "
                     "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –æ–ø—Ü—ñ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è.",
                parse_mode="HTML"
            )

    @staticmethod
    async def cancel_balance_dialog(callback: CallbackQuery, button: Button, manager: DialogManager):
        cur_state = manager.dialog_data.get("cur_state")
        is_executor = True if cur_state == ExecutorDialog.executor_state else False

        await manager.done(result={"has_ended": True})
        await callback.message.answer(
            text="–ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É –∑ –±–∞–ª–∞–Ω—Å–æ–º",
            reply_markup=create_keyboard_executor() if is_executor else create_keyboard_client()
        )

    @staticmethod
    async def cancel_subdialog(callback: CallbackQuery, button: Button, manager: DialogManager):
        cur_state = manager.dialog_data.get("cur_state")
        is_executor = True if cur_state == ExecutorDialog.executor_state else False
        await manager.done(result={"has_ended": True})
        await callback.message.answer(
            text="–í—ñ–¥–º—ñ–Ω–µ–Ω–æ",
            reply_markup=create_keyboard_executor() if is_executor else create_keyboard_client()
        )


class WithdrawCallbacks:
    @staticmethod
    async def withdraw_all_money(callback: CallbackQuery, button: Button, manager: DialogManager):
        balance = manager.dialog_data.get("balance")
        amount = decimal.Decimal(balance)
        commission_sum = amount * COMMISSION

        manager.dialog_data["input_sum"] = float(round(amount - commission_sum, 2))
        manager.dialog_data["commission_sum"] = float(round(commission_sum, 2))
        await manager.next()

    @staticmethod
    async def process_sum_input(message: Message, input_widget: MessageInput, manager: DialogManager):
        try:
            input_sum = message.text
            input_sum = decimal.Decimal(input_sum)

            if input_sum > manager.dialog_data.get("balance"):
                await message.answer(
                    text="<b>üî¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –±–∞–ª–∞–Ω—Å</b>\n"
                         "<i>–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤.</i> "
                         "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–ø–æ–≤–Ω—ñ—Ç—å —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å –∞–±–æ –∑–º–µ–Ω—à—Ç–µ –∑–∞–ø–∏—Ç–∞–Ω—É —Å—É–º—É.",
                    parse_mode="HTML"
                )
            elif input_sum <= 0:
                await message.answer(
                    text="<b>üî¥ –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è</b>\n"
                         "<i>–í–≤–µ–¥–µ–Ω–µ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Ä—ñ–≤–Ω–∏–º –∞–±–æ –º–µ–Ω—à–∏–º –∑–∞ –Ω—É–ª—å."
                         "</i> –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è.",
                    parse_mode="HTML"
                )
            else:
                commission_sum = input_sum * COMMISSION
                manager.dialog_data["input_sum"] = float(round(input_sum - commission_sum, 2))
                manager.dialog_data["commission_sum"] = float(round(commission_sum, 2))
                await manager.switch_to(WithdrawingMoneySub.handle_cards)
        except ValueError:
            await message.answer(
                text="<b>üî¥ –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ —Å—É–º–∏</b>\n"
                     "<i>–í–≤–µ–¥–µ–Ω–∞ –≤–∞–º–∏ —Å—É–º–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤—ñ—Ä–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.</i> –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∑–Ω–æ–≤—É.",
                parse_mode="HTML"
            )

    @staticmethod
    async def process_card_input(message: Message, input_widget: MessageInput, manager: DialogManager):
        card_number = message.text.replace(" ", "").strip()
        card_valid = is_valid_card(card_number)

        if card_valid:

            is_updated = await Balance().update_user_cards(
                user_id=message.from_user.id,
                card=card_number
            ).do_request()

            if is_updated.is_error:
                await message.answer(
                    text="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—ñ –∫–∞—Ä—Ç–∫–∏!"
                )
                return
            manager.dialog_data["withdrawal_card"] = format_card_number(card_number)
            await manager.switch_to(WithdrawingMoneySub.accept_withdraw)

        else:
            await message.answer(
                text="<b>üî¥ –ü–æ–º–∏–ª–∫–∞ —É –¥–∞–Ω–∏—Ö –∫–∞—Ä—Ç–∫–∏</b>\n"
                     "<i>–í–≤–µ–¥–µ–Ω–µ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ.</i>"
                     "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–æ–≤—É.",
                parse_mode="HTML"
            )

    @staticmethod
    async def accept_withdraw(callback: CallbackQuery, button: Button, manager: DialogManager):
        cur_state = manager.dialog_data.get("cur_state")
        input_sum = decimal.Decimal(manager.dialog_data.get("input_sum"))
        commission = decimal.Decimal(manager.dialog_data.get("commission_sum"))
        card_number = manager.dialog_data.get("withdrawal_card")

        commission = round(commission, 2)
        input_sum = round(input_sum, 2)

        is_executor = True if cur_state == ExecutorDialog.executor_state else False

        balance_withdrawal = await Balance().perform_fund_transfer(
            user_id=callback.from_user.id,
            amount=round(input_sum + commission, 2),
            action=BalanceAction.withdrawal
        ).do_request()

        if balance_withdrawal.is_error:
            await callback.answer(text='–í–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è–º –∫–æ—à—Ç—ñ–≤! –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!')
            await manager.done()
            return

        withdrawal = await Withdrawals().save_withdrawal_data(
            user_id=callback.from_user.id,
            status=WithdrawalStatus.pending,
            amount=input_sum,
            commission=commission,
            payment_method=card_number
        ).do_request()

        if withdrawal.is_error:
            await callback.answer(text='–í–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –∫–æ—à—Ç–∏! –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!')
            await manager.done()
            await Balance().perform_fund_transfer(
                user_id=callback.from_user.id,
                amount=round(input_sum + commission, 2),
                action=BalanceAction.replenishment
            ).do_request()
            return

        await callback.message.answer(
            text="–°–∫–æ—Ä–æ –∫–æ—à—Ç–∏ –∑'—è–≤–ª—è—Ç—å—Å—è –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É!",
            reply_markup=create_keyboard_executor() if is_executor else create_keyboard_client()
        )
        await manager.done()

